[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 79

[tool.isort]
profile = "black"
line_length = 79

[project]
name = "lls_core"
version = "1.0.0"
authors = [
    {name = "Pradeep Rajasekhar"},
    {name = "Lachlan Whitehead"},
    {name = "Robert Haase"},
    {name = "Michael Milton"}
]
license = {text = "GPL-3.0-only"}
description = "Core functionality for analysing and visualizing lattice lightsheet and Oblique Plane Microscopy data."
readme = { file = "README.md", content-type = "text/markdown" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Framework :: napari",
    "Topic :: Software Development :: Testing",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
]
requires-python = ">=3.8"
dependencies = [
    "aicsimageio>=4.6.3",
    # Earlier versions don't have Python 3.11 binaries, and the sdist
    # is misconfigured: https://github.com/AllenCellModeling/aicspylibczi/issues/90
    "aicspylibczi>=3.1.1",
    "click",
    "dask",
    "dask[distributed]",
    "fsspec>=2022.8.2",
    "importlib_resources",
    # Older tifffile are not compatible with aicsimageio, see: https://github.com/AllenCellModeling/aicsimageio/issues/518
    "napari-workflows>=0.2.8",
    "npy2bdv",
    "numpy",
    "pandas",
    "pyclesperanto_prototype>=0.20.0",
    "pyopencl",
    # This is the first pydantic version that supports the "compatibility mode"
    # https://docs.pydantic.dev/latest/migration/#using-pydantic-v1-features-in-a-v1v2-environment
    "pydantic>=1.10.17,<3",
    "pyyaml",
    "read-roi",
    "rich",
    "resource-backed-dask-array>=0.1.0",
    "scikit-image",
    "StrEnum",
    "tifffile>=2023.3.15", #>=2022.8.12
    "toolz",
    "tqdm",
    "typer",
    "typing_extensions>=4.7.0",
    "xarray[parallel]",
]

[project.urls]
Repository = "https://github.com/BioimageAnalysisCoreWEHI/napari_lattice"
BugTracker = "https://github.com/BioimageAnalysisCoreWEHI/napari_lattice/issues"
Documentation = "https://github.com/BioimageAnalysisCoreWEHI/napari_lattice/wiki"
SourceCode = "https://github.com/BioimageAnalysisCoreWEHI/napari_lattice"
UserSupport = "https://github.com/BioimageAnalysisCoreWEHI/napari_lattice/issues"

[project.optional-dependencies]
testing = [
    "tox",
    "pytest",  # https://docs.pytest.org/en/latest/contents.html
    "pytest-cov",  # https://pytest-cov.readthedocs.io/en/latest/
    "napari" # We use napari for type checking only, and not at runtime
]
deconvolution = [
    "pycudadecon~=0.5",
    "numpy<2"
]
docs = [
    "mkdocstrings[python]",
    "mkdocs-click",
    "mkdocs-material",
    # Includes fixes for Pydantic 1.X
    "fieldz>=0.1.0",
    "griffe-fieldz"
]
deploy = [
    "build",
    "twine"
]

[project.scripts]
lls-pipeline = "lls_core.cmds.__main__:main"

[tool.mypy]
plugins = [
  "pydantic.mypy"
]

[tool.pydantic-mypy]
init_typed = false

[tool.pyright]
typeCheckingMode = "off"
reportUndefinedVariable = "error"
reportMissingImports = "none"
reportMissingTypeStubs = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUntypedFunctionDecorator = false
reportMissingTypeArgument = false
reportPrivateUsage = false
reportPrivateImportUsage = false
reportUnnecessaryComparison = false

[tool.fawltydeps]
ignore_unused = [
    # None of the testing packages are imported
    "tox",
    "pytest",
    "pytest-cov",
    "pytest-qt",

    # These napari plugins are needed to use the plugin, but aren't imported directly
    "napari-aicsimageio",
    "napari-workflow-inspector",

    # These are used for docs
    "mkdocstrings",
    "mkdocs-click",
    "mkdocs-material",
    "fieldz",
    "griffe-fieldz",

    # This is pinned but unused
    "fsspec",

    # Used for the deployment, but never imported
    "build",
    "twine"
]
output_format = "human_detailed"  
